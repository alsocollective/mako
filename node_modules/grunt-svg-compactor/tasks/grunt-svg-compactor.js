/*
 * grunt-svg-compactor
 *
 * Based on svg-compactor, this plugin allow to transform a folder of .svg file into a .css files where svg paths
 * are stored in data-uri.
 *
 */

'use strict';

module.exports = function(grunt) {

  grunt.registerMultiTask('svgcompactor', 'Transforms a folder of .svg files into data-uri stored in .css file', function () {
    var options = this.data;

    var path = require('path'),
      cheerio = require('cheerio'),
      stack = [],

      stackName = 'stack',
      sourceDir = path.normalize('./'),
      targetDir = null,
      cssFile = null;

    function addToStack(file) {

      var id = path.basename(file, '.svg');
      var svgXml = grunt.file.read(file);
      var $ = cheerio.load(svgXml, {
        ignoreWhitespace: false,
        xmlMode: true
      });
      
      stack.push({
        id: id,
        svg: $.root().html().toString(),
        w: $.root().find('svg').attr('width'),
        h: $.root().find('svg').attr('height')
      });
    }

    function readSourceDir(cb) {

      console.log("Reading " + sourceDir);

      var i = 0;
      grunt.file.recurse(sourceDir, function(abspath, rootdir, subdir, filename) {
        if(path.extname(filename) != '.svg') {
          return;
        }
        addToStack(sourceDir+ '/' + filename);
        i++;
      });
      if(i == 0) {
        console.log("  Error: no SVG Files found in " + sourceDir);
        console.log("");
      } else {
        console.log("  " + stack.length + " items stacked");
        console.log("");
        cb();
      }
    }

    function getDateTime() {
      var date = new Date();
      var hour = date.getHours();
      hour = (hour < 10 ? "0" : "") + hour;
      var min  = date.getMinutes();
      min = (min < 10 ? "0" : "") + min;
      var sec  = date.getSeconds();
      sec = (sec < 10 ? "0" : "") + sec;
      var year = date.getFullYear();
      var month = date.getMonth() + 1;
      month = (month < 10 ? "0" : "") + month;
      var day  = date.getDate();
      day = (day < 10 ? "0" : "") + day;
      return year + "/" + month + "/" + day + " at " + hour + ":" + min + ":" + sec;
    }

    function output() {
      var html = [];
      html.push('<!-- #file generated with svg-compactor on ' + getDateTime() + ' -->');
      html.push('<html>');
      html.push('<head>');
      html.push('  <title>SVG Compactor</title>');
      html.push('  <style>body { font-family: Helvetica; background-color: #CCC; }</style>');
      html.push('  <link rel="stylesheet" type="text/css" href="assets/' + stackName + '.css' +'">');
      html.push('</head>');
      html.push('<body>');
      html.push('<h1>SVG Compactor</h1>');

      var code = '';
      var cssContent = ['/** #file generated with svg-compactor on ' + getDateTime() + ' */'];
      stack.forEach(function(icon) {

        var prefix = "data:image/svg+xml;charset=US-ASCII,";
        var dataURI = prefix + encodeURIComponent(icon.svg
          //strip newlines and tabs
          .replace( /[\n\r]/gmi, "" )
          .replace( /\t/gmi, " " )
          //strip comments
          .replace(/<\!\-\-(.*(?=\-\->))\-\->/gmi, "")
          //replace
          .replace(/'/gmi, "\\i"));

        var className = stackName + '-' + icon.id;

        html.push('<div>');
        html.push('<div>' + icon.id + '</div>');
        code = '<div class="' + className + '"></div>'
        html.push('<div>' + code + '</div>');
        html.push('<div><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></div>');
        html.push('</div>');

        cssContent.push('.' + className + ' { background: url(\'' + dataURI + '\'); background-repeat: no-repeat; width: ' + icon.w + 'px; height: ' + icon.h + 'px; }');

      });
      html.push('</div>');
      html.push('</body>');
      html.push('</html>');

      var htmlText = html.join("\n");
      var filename = targetDir + stackName + '-demo.html';

      console.log(cssFile);

      grunt.file.write(cssFile, cssContent.join("\n"));

      grunt.file.write(filename, htmlText);
      console.log("  html demo saved: " + filename);
    }

    function htmlEscape(str) {
      return String(str)
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
    }

    function compact(source, target, outputname) {
      sourceDir = path.normalize(source + '/');
      stackName = outputname ? outputname : 'stack';
      targetDir = target ? path.normalize(target + '/') : sourceDir + stackName + '/';
      cssFile = targetDir + 'assets/' + stackName + '.css';
      // create target directory
      if (!grunt.file.exists(targetDir)) {
        grunt.file.mkdir(targetDir);
      }
      console.log('SVG Compactor');
      readSourceDir(function() {
        output();
        console.log('Done.');
      });
    };

    if(!options.source) {
      throw new Error('You should define the "source" folder whare are your .svg');
    }

    compact(
      options.source,
      options.target,
      options.outputname || 'stack'
    );
  });
}